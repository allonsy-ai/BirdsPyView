{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled14.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMLqXVxKFOoteiA1h2yJcon",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/allonsy-ai/BirdsPyView/blob/master/linear%20regression%20using%20tensorflow%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RznYTiuFnmvz"
      },
      "source": [
        "import os\n",
        "os.environ['TF_CPP_MIN_LOG_LEVEL']='2'"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gK0HAE6roJPW"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "import numpy as np "
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zJ7SliE7okp9"
      },
      "source": [
        "import pandas as pd \n",
        "\n",
        "#Make Numpy print out easier to read\n",
        "np.set_printoptions(precision=3, suppress=True)"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QELOEvlhKJ_L"
      },
      "source": [
        "import tensorflow as tf\n"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nxHYTN8DpfBs"
      },
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras.layers.experimental import preprocessing"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RJuYf6AGxeoA"
      },
      "source": [
        "# https://archive.ics.uci.edu/ml/datasets/Auto+MPG\n",
        "url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'\n",
        "column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight',\n",
        "                'Acceleration', 'Model Year', 'Origin']\n",
        "\n",
        "dataset = pd.read_csv(url, names=column_names, na_values='?',\n",
        "                      comment='\\t', sep=' ', skipinitialspace=True)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HWI1ZxzMxlMz",
        "outputId": "5d47d46a-47da-4044-f9fd-87413f21d75a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "dataset.tail()\n"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MPG</th>\n",
              "      <th>Cylinders</th>\n",
              "      <th>Displacement</th>\n",
              "      <th>Horsepower</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Acceleration</th>\n",
              "      <th>Model Year</th>\n",
              "      <th>Origin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>393</th>\n",
              "      <td>27.0</td>\n",
              "      <td>4</td>\n",
              "      <td>140.0</td>\n",
              "      <td>86.0</td>\n",
              "      <td>2790.0</td>\n",
              "      <td>15.6</td>\n",
              "      <td>82</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>44.0</td>\n",
              "      <td>4</td>\n",
              "      <td>97.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>2130.0</td>\n",
              "      <td>24.6</td>\n",
              "      <td>82</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>32.0</td>\n",
              "      <td>4</td>\n",
              "      <td>135.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>2295.0</td>\n",
              "      <td>11.6</td>\n",
              "      <td>82</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>28.0</td>\n",
              "      <td>4</td>\n",
              "      <td>120.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>2625.0</td>\n",
              "      <td>18.6</td>\n",
              "      <td>82</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>31.0</td>\n",
              "      <td>4</td>\n",
              "      <td>119.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>2720.0</td>\n",
              "      <td>19.4</td>\n",
              "      <td>82</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      MPG  Cylinders  Displacement  ...  Acceleration  Model Year  Origin\n",
              "393  27.0          4         140.0  ...          15.6          82       1\n",
              "394  44.0          4          97.0  ...          24.6          82       2\n",
              "395  32.0          4         135.0  ...          11.6          82       1\n",
              "396  28.0          4         120.0  ...          18.6          82       1\n",
              "397  31.0          4         119.0  ...          19.4          82       1\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9WpWRzMBxzFL"
      },
      "source": [
        "# clean data\n",
        "dataset = dataset.dropna()\n",
        "\n",
        "# convert categorical 'Origin' data into one-hot data\n",
        "origin = dataset.pop('Origin')\n",
        "dataset['USA'] = (origin == 1)*1\n",
        "dataset['Europe'] = (origin == 2)*1\n",
        "dataset['Japan'] = (origin == 3)*1"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WVCLbe2wx1NR",
        "outputId": "5ba08fa0-b677-48f5-c14b-b1b2d9a5c916",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        }
      },
      "source": [
        "# Split the data into train and test\n",
        "train_dataset = dataset.sample(frac=0.8, random_state=0)\n",
        "test_dataset = dataset.drop(train_dataset.index)\n",
        "\n",
        "print(dataset.shape, train_dataset.shape, test_dataset.shape)\n",
        "train_dataset.describe().transpose()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(392, 10) (314, 10) (78, 10)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MPG</th>\n",
              "      <td>314.0</td>\n",
              "      <td>23.310510</td>\n",
              "      <td>7.728652</td>\n",
              "      <td>10.0</td>\n",
              "      <td>17.00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>28.95</td>\n",
              "      <td>46.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cylinders</th>\n",
              "      <td>314.0</td>\n",
              "      <td>5.477707</td>\n",
              "      <td>1.699788</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.00</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Displacement</th>\n",
              "      <td>314.0</td>\n",
              "      <td>195.318471</td>\n",
              "      <td>104.331589</td>\n",
              "      <td>68.0</td>\n",
              "      <td>105.50</td>\n",
              "      <td>151.0</td>\n",
              "      <td>265.75</td>\n",
              "      <td>455.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horsepower</th>\n",
              "      <td>314.0</td>\n",
              "      <td>104.869427</td>\n",
              "      <td>38.096214</td>\n",
              "      <td>46.0</td>\n",
              "      <td>76.25</td>\n",
              "      <td>94.5</td>\n",
              "      <td>128.00</td>\n",
              "      <td>225.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Weight</th>\n",
              "      <td>314.0</td>\n",
              "      <td>2990.251592</td>\n",
              "      <td>843.898596</td>\n",
              "      <td>1649.0</td>\n",
              "      <td>2256.50</td>\n",
              "      <td>2822.5</td>\n",
              "      <td>3608.00</td>\n",
              "      <td>5140.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Acceleration</th>\n",
              "      <td>314.0</td>\n",
              "      <td>15.559236</td>\n",
              "      <td>2.789230</td>\n",
              "      <td>8.0</td>\n",
              "      <td>13.80</td>\n",
              "      <td>15.5</td>\n",
              "      <td>17.20</td>\n",
              "      <td>24.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Model Year</th>\n",
              "      <td>314.0</td>\n",
              "      <td>75.898089</td>\n",
              "      <td>3.675642</td>\n",
              "      <td>70.0</td>\n",
              "      <td>73.00</td>\n",
              "      <td>76.0</td>\n",
              "      <td>79.00</td>\n",
              "      <td>82.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>USA</th>\n",
              "      <td>314.0</td>\n",
              "      <td>0.624204</td>\n",
              "      <td>0.485101</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Europe</th>\n",
              "      <td>314.0</td>\n",
              "      <td>0.178344</td>\n",
              "      <td>0.383413</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Japan</th>\n",
              "      <td>314.0</td>\n",
              "      <td>0.197452</td>\n",
              "      <td>0.398712</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              count         mean         std  ...     50%      75%     max\n",
              "MPG           314.0    23.310510    7.728652  ...    22.0    28.95    46.6\n",
              "Cylinders     314.0     5.477707    1.699788  ...     4.0     8.00     8.0\n",
              "Displacement  314.0   195.318471  104.331589  ...   151.0   265.75   455.0\n",
              "Horsepower    314.0   104.869427   38.096214  ...    94.5   128.00   225.0\n",
              "Weight        314.0  2990.251592  843.898596  ...  2822.5  3608.00  5140.0\n",
              "Acceleration  314.0    15.559236    2.789230  ...    15.5    17.20    24.8\n",
              "Model Year    314.0    75.898089    3.675642  ...    76.0    79.00    82.0\n",
              "USA           314.0     0.624204    0.485101  ...     1.0     1.00     1.0\n",
              "Europe        314.0     0.178344    0.383413  ...     0.0     0.00     1.0\n",
              "Japan         314.0     0.197452    0.398712  ...     0.0     0.00     1.0\n",
              "\n",
              "[10 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MHOpvHw4zc9D"
      },
      "source": [
        "# split features from labels\n",
        "train_features = train_dataset.copy()\n",
        "test_features = test_dataset.copy()\n",
        "\n",
        "train_labels = train_features.pop('MPG')\n",
        "test_labels = test_features.pop('MPG')"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qDM36Kdy1yQh"
      },
      "source": [
        "def plot(feature, x=None, y=None):\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    plt.scatter(train_features[feature], train_labels, label='Data')\n",
        "    if x is not None and y is not None:\n",
        "        plt.plot(x, y, color='k', label='Predictions')\n",
        "    plt.xlabel(feature)\n",
        "    plt.ylabel('MPG')\n",
        "    plt.legend()"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vklyasof14NB",
        "outputId": "c56c14cb-4a67-45d1-f47b-cdf39267d06f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        }
      },
      "source": [
        "plot('Horsepower')"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "34f40Z2u2SGi",
        "outputId": "a5803244-4aae-4270-c2a0-233592ea3e19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        }
      },
      "source": [
        "plot('Weight')\n"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fHZAZUCl2T1R",
        "outputId": "40f63c15-94e3-42e3-e579-f159afdb3664",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# Normalize\n",
        "print(train_dataset.describe().transpose()[['mean', 'std']])\n",
        "\n",
        "# Normalization\n",
        "normalizer = preprocessing.Normalization()\n",
        "\n",
        "# adapt to the data\n",
        "normalizer.adapt(np.array(train_features))\n",
        "print(normalizer.mean.numpy())"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                     mean         std\n",
            "MPG             23.310510    7.728652\n",
            "Cylinders        5.477707    1.699788\n",
            "Displacement   195.318471  104.331589\n",
            "Horsepower     104.869427   38.096214\n",
            "Weight        2990.251592  843.898596\n",
            "Acceleration    15.559236    2.789230\n",
            "Model Year      75.898089    3.675642\n",
            "USA              0.624204    0.485101\n",
            "Europe           0.178344    0.383413\n",
            "Japan            0.197452    0.398712\n",
            "[   5.478  195.318  104.869 2990.252   15.559   75.898    0.624    0.178\n",
            "    0.197]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2Ed_WQd2Tyr",
        "outputId": "d75ccac1-450f-4a98-a897-ffb7d8c410d6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "# When the layer is called it returns the input data, with each feature independently normalized:\n",
        "# (input-mean)/stddev\n",
        "first = np.array(train_features[:1])\n",
        "print('First example:', first)\n",
        "print('Normalized:', normalizer(first).numpy())"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "First example: [[   4.    90.    75.  2125.    14.5   74.     1.     0.     0. ]]\n",
            "Normalized: [[-0.871 -1.011 -0.785 -1.027 -0.38  -0.517  0.776 -0.466 -0.496]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cR92S3pAGB0h",
        "outputId": "87d403a5-71c3-4d13-d6a1-89f6dbcd0b9d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Regression\n",
        " # 1. Normalize the input horsepower\n",
        " # 2. Apply a linear transformation (y = m*x+b) to produce 1 output using layers.Dense\n",
        "\n",
        "feature = 'Horsepower'\n",
        "single_feature = np.array(train_features[feature])\n",
        "print(single_feature.shape, train_features.shape)\n",
        "\n",
        "# Normalization\n",
        "single_feature_normalizer = preprocessing.Normalization()\n",
        "\n",
        "# adapt to the data\n",
        "single_feature_normalizer.adapt(single_feature)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(314,) (314, 9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D2kudN-2GHaA"
      },
      "source": [
        " # Sequential model\n",
        "single_feature_model = keras.models.Sequential([\n",
        "    single_feature_normalizer,\n",
        "    layers.Dense(units=1) # Linear Model\n",
        "])"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0fmJZZw5Gv3e",
        "outputId": "2f8817ea-0225-432c-dad2-4b4f19ee4861",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 218
        }
      },
      "source": [
        "single_feature_model.summary()\n"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "normalization_3 (Normalizati (None, 1)                 3         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 2         \n",
            "=================================================================\n",
            "Total params: 5\n",
            "Trainable params: 2\n",
            "Non-trainable params: 3\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cC9knwyRG6UQ"
      },
      "source": [
        "# loss and optimizer\n",
        "loss = keras.losses.MeanAbsoluteError() # MeanSquaredError\n",
        "optim = keras.optimizers.Adam(lr=0.1)\n",
        "\n",
        "single_feature_model.compile(optimizer=optim, loss=loss)"
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBb0esOXG6fM",
        "outputId": "a6ef3e97-6985-445e-c8d4-32b849657c8b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "history = single_feature_model.fit(\n",
        "    train_features[feature], train_labels,\n",
        "    epochs=100,\n",
        "    verbose=1,\n",
        "    # Calculate validation results on 20% of the training data\n",
        "    validation_split = 0.2)\n",
        "\n"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 0s 13ms/step - loss: 22.8741 - val_loss: 22.9359\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 22.0690 - val_loss: 22.1364\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 21.2625 - val_loss: 21.3365\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 20.4633 - val_loss: 20.5363\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 19.6672 - val_loss: 19.7365\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18.8629 - val_loss: 18.9365\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18.0615 - val_loss: 18.1363\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 17.2624 - val_loss: 17.3365\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 16.4645 - val_loss: 16.5362\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15.6644 - val_loss: 15.7365\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14.8616 - val_loss: 14.9364\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14.0686 - val_loss: 14.1369\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 13.2773 - val_loss: 13.3519\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 12.4961 - val_loss: 12.5742\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 11.7149 - val_loss: 11.7997\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 10.9407 - val_loss: 11.0189\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 10.1659 - val_loss: 10.2365\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 9.3875 - val_loss: 9.4626\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 8.6422 - val_loss: 8.7071\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 7.9260 - val_loss: 7.9717\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 7.2500 - val_loss: 7.2543\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.6120 - val_loss: 6.6063\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.0048 - val_loss: 6.0323\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.5071 - val_loss: 5.5890\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.0701 - val_loss: 5.2571\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.7546 - val_loss: 5.0414\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.4992 - val_loss: 4.8498\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.3052 - val_loss: 4.6762\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 4.1424 - val_loss: 4.5447\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 4.0450 - val_loss: 4.4674\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.9669 - val_loss: 4.4133\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.9073 - val_loss: 4.3346\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8669 - val_loss: 4.2967\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8419 - val_loss: 4.2658\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8336 - val_loss: 4.2379\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8241 - val_loss: 4.2443\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8217 - val_loss: 4.2396\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8101 - val_loss: 4.2105\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.8079 - val_loss: 4.2008\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8049 - val_loss: 4.2067\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8029 - val_loss: 4.1990\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8042 - val_loss: 4.1920\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8048 - val_loss: 4.1998\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8085 - val_loss: 4.2300\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8052 - val_loss: 4.2089\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8032 - val_loss: 4.1973\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8037 - val_loss: 4.1978\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8042 - val_loss: 4.2053\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8050 - val_loss: 4.1880\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8043 - val_loss: 4.1947\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8081 - val_loss: 4.2191\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8041 - val_loss: 4.1982\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8033 - val_loss: 4.1795\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8037 - val_loss: 4.1939\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8026 - val_loss: 4.1935\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8044 - val_loss: 4.1925\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.8057 - val_loss: 4.2079\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8022 - val_loss: 4.1806\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8080 - val_loss: 4.1597\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8039 - val_loss: 4.1783\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8051 - val_loss: 4.1973\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8024 - val_loss: 4.1794\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8054 - val_loss: 4.1891\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8017 - val_loss: 4.1915\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8041 - val_loss: 4.1877\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8026 - val_loss: 4.1925\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8030 - val_loss: 4.1903\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8020 - val_loss: 4.1993\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8062 - val_loss: 4.2081\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8043 - val_loss: 4.1849\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8079 - val_loss: 4.1609\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8042 - val_loss: 4.1792\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8044 - val_loss: 4.1988\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8031 - val_loss: 4.1870\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8031 - val_loss: 4.1895\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8035 - val_loss: 4.1859\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8065 - val_loss: 4.1800\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8036 - val_loss: 4.2027\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8045 - val_loss: 4.1839\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8040 - val_loss: 4.1819\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8021 - val_loss: 4.1980\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8030 - val_loss: 4.1943\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8023 - val_loss: 4.1903\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8048 - val_loss: 4.1817\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8072 - val_loss: 4.1974\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8016 - val_loss: 4.1786\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8060 - val_loss: 4.1744\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8081 - val_loss: 4.2029\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8034 - val_loss: 4.1786\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8058 - val_loss: 4.1717\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.8040 - val_loss: 4.2036\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8048 - val_loss: 4.1882\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8039 - val_loss: 4.1918\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8048 - val_loss: 4.2006\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8046 - val_loss: 4.1945\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8041 - val_loss: 4.1745\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8047 - val_loss: 4.1907\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8024 - val_loss: 4.2026\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8034 - val_loss: 4.1913\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8022 - val_loss: 4.1928\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jYvFSBbqG6ae",
        "outputId": "0639824d-a223-4bd1-a9c1-2d44b346d3aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "source": [
        "def plot_loss(history):\n",
        "    plt.plot(history.history['loss'], label='loss')\n",
        "    plt.plot(history.history['val_loss'], label='val_loss')\n",
        "    plt.ylim([0, 25])\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Error [MPG]')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "plot_loss(history)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_64dqgQNIDvQ",
        "outputId": "e1bd847e-4214-456e-afe9-2d8df117cf83",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "single_feature_model.evaluate(\n",
        "    test_features[feature],\n",
        "    test_labels, verbose=1)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3/3 [==============================] - 0s 1ms/step - loss: 3.6430\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.6430163383483887"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kvnQcHCgIKJX",
        "outputId": "63bbdf86-296e-45be-ea7b-ab68ee804f60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        }
      },
      "source": [
        "# predict and plot\n",
        "range_min = np.min(test_features[feature]) - 10\n",
        "range_max = np.max(test_features[feature]) + 10\n",
        "x = tf.linspace(range_min, range_max, 200)\n",
        "y = single_feature_model.predict(x)\n",
        "    \n",
        "plot(feature, x,y)"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8dCqiL3FIKX3"
      },
      "source": [
        "# DNN\n",
        "dnn_model = keras.Sequential([\n",
        "    single_feature_normalizer,\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(1)\n",
        "])"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J7lwQNt0IKkh",
        "outputId": "5b49da70-9701-4a5a-f178-b8aaa812032b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "dnn_model.compile(loss=loss, \n",
        "                  optimizer=tf.keras.optimizers.Adam(0.001))\n",
        "\n",
        "dnn_model.summary()\n"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "normalization_3 (Normalizati (None, 1)                 3         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 64)                128       \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 64)                4160      \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 1)                 65        \n",
            "=================================================================\n",
            "Total params: 4,356\n",
            "Trainable params: 4,353\n",
            "Non-trainable params: 3\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_08GgrqYKo2S",
        "outputId": "029f4a22-fe13-4fc9-ee87-6d218b60349c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "dnn_model.fit(\n",
        "    train_features[feature], train_labels,\n",
        "    validation_split=0.2,\n",
        "    verbose=1, epochs=100)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 23.0362 - val_loss: 23.4062\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 22.7895 - val_loss: 23.1258\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 22.5047 - val_loss: 22.7960\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 22.1547 - val_loss: 22.3822\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 21.7202 - val_loss: 21.8435\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 21.1412 - val_loss: 21.1405\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 20.3965 - val_loss: 20.2424\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 19.4452 - val_loss: 19.1419\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18.3188 - val_loss: 17.8823\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 17.1136 - val_loss: 16.5450\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15.6718 - val_loss: 15.1633\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14.0631 - val_loss: 13.6599\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 12.3381 - val_loss: 11.9290\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 10.3558 - val_loss: 9.9202\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 8.2874 - val_loss: 7.8821\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.0013 - val_loss: 5.9364\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.5542 - val_loss: 5.2909\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.1071 - val_loss: 5.1911\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 4.0887 - val_loss: 5.0628\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.9556 - val_loss: 4.8615\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.9095 - val_loss: 4.7639\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8612 - val_loss: 4.7287\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.8052 - val_loss: 4.6859\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.7614 - val_loss: 4.6239\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.7208 - val_loss: 4.5475\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.6949 - val_loss: 4.4867\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.6709 - val_loss: 4.4262\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.6320 - val_loss: 4.3708\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.6072 - val_loss: 4.3315\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5920 - val_loss: 4.2777\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5696 - val_loss: 4.2295\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5417 - val_loss: 4.2053\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5321 - val_loss: 4.1876\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5048 - val_loss: 4.1404\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.4878 - val_loss: 4.1099\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.4742 - val_loss: 4.0953\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.4605 - val_loss: 4.0705\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.4425 - val_loss: 4.0429\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.4303 - val_loss: 4.0233\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.4177 - val_loss: 3.9987\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.4173 - val_loss: 3.9797\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3901 - val_loss: 3.9553\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3883 - val_loss: 3.9295\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3682 - val_loss: 3.9205\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3580 - val_loss: 3.8966\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3572 - val_loss: 3.8756\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3384 - val_loss: 3.8684\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3310 - val_loss: 3.8510\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3237 - val_loss: 3.8363\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3166 - val_loss: 3.8296\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3075 - val_loss: 3.8118\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3034 - val_loss: 3.8027\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3097 - val_loss: 3.7964\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2919 - val_loss: 3.7838\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.3057 - val_loss: 3.8074\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2982 - val_loss: 3.7770\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2874 - val_loss: 3.7753\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2791 - val_loss: 3.7890\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2827 - val_loss: 3.7916\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2778 - val_loss: 3.7844\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2752 - val_loss: 3.7773\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2798 - val_loss: 3.7882\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2749 - val_loss: 3.7878\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2779 - val_loss: 3.7870\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2719 - val_loss: 3.7894\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2690 - val_loss: 3.7767\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2735 - val_loss: 3.7791\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2712 - val_loss: 3.7899\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2803 - val_loss: 3.7816\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2694 - val_loss: 3.7858\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2677 - val_loss: 3.7922\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2720 - val_loss: 3.7751\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2666 - val_loss: 3.7621\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2803 - val_loss: 3.7647\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 5ms/step - loss: 3.2740 - val_loss: 3.7834\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2723 - val_loss: 3.8060\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2681 - val_loss: 3.7627\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2699 - val_loss: 3.7644\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2719 - val_loss: 3.7585\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2571 - val_loss: 3.7776\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2706 - val_loss: 3.7661\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2695 - val_loss: 3.8072\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2654 - val_loss: 3.7623\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2863 - val_loss: 3.7552\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2531 - val_loss: 3.7678\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2833 - val_loss: 3.8048\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2683 - val_loss: 3.7602\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2580 - val_loss: 3.7561\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2644 - val_loss: 3.7618\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2578 - val_loss: 3.7750\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2615 - val_loss: 3.7629\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2568 - val_loss: 3.7700\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2706 - val_loss: 3.7748\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2637 - val_loss: 3.7436\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2673 - val_loss: 3.7563\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2558 - val_loss: 3.7878\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2609 - val_loss: 3.7630\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 3.2590 - val_loss: 3.7527\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 5ms/step - loss: 3.2578 - val_loss: 3.7857\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.2494 - val_loss: 3.7633\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fe0f94836a0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MJHT_41CKv7Y",
        "outputId": "13ec85ea-99a5-4f80-849c-bc077bcc8a93",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "dnn_model.evaluate(test_features[feature], test_labels, verbose=1)\n"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3/3 [==============================] - 0s 2ms/step - loss: 2.9081\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.9080793857574463"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cx4ls_D6K4TS",
        "outputId": "8704352e-e13b-4592-c328-0b3cadb61a96",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        }
      },
      "source": [
        "# predict and plot\n",
        "x = tf.linspace(range_min, range_max, 200)\n",
        "y = dnn_model.predict(x)\n",
        "\n",
        "plot(feature, x,y)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yx00Uf_tLBUi"
      },
      "source": [
        "# multiple inputs\n",
        "linear_model = tf.keras.Sequential([\n",
        "    normalizer,\n",
        "    layers.Dense(units=1)\n",
        "])\n",
        "\n",
        "linear_model.compile(\n",
        "    optimizer=tf.optimizers.Adam(learning_rate=0.1),\n",
        "    loss=loss)"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "frjtGaUGLFK2",
        "outputId": "3d5c05c4-5cf9-4eae-c7a1-0a0087eb003d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "linear_model.fit(\n",
        "    train_features, train_labels, \n",
        "    epochs=100,\n",
        "    verbose=1,\n",
        "    # Calculate validation results on 20% of the training data\n",
        "    validation_split = 0.2)"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 22.8894 - val_loss: 23.0856\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 22.0525 - val_loss: 22.3852\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 21.2085 - val_loss: 21.6338\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 20.3880 - val_loss: 20.9073\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 19.5713 - val_loss: 20.1858\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18.7572 - val_loss: 19.4603\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 18.0192 - val_loss: 18.7060\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 17.1262 - val_loss: 17.9943\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 16.3068 - val_loss: 17.2930\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 15.5073 - val_loss: 16.6451\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 14.6681 - val_loss: 15.8693\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 13.8753 - val_loss: 15.0846\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 13.0747 - val_loss: 14.4113\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 12.2780 - val_loss: 13.6617\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 11.4880 - val_loss: 12.9390\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 10.6824 - val_loss: 12.2636\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 9.8947 - val_loss: 11.4154\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 9.1228 - val_loss: 10.6784\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 8.3511 - val_loss: 9.8966\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 7.6042 - val_loss: 9.1586\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.9213 - val_loss: 8.4685\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.3316 - val_loss: 7.9407\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.7740 - val_loss: 7.3414\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.3711 - val_loss: 6.4894\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.8273 - val_loss: 5.9075\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 4.3501 - val_loss: 5.3924\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.9290 - val_loss: 4.8282\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.5519 - val_loss: 3.9834\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 3.1574 - val_loss: 3.5804\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.9077 - val_loss: 3.1584\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.7794 - val_loss: 2.9510\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 2.6912 - val_loss: 2.7909\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.6006 - val_loss: 2.7250\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5492 - val_loss: 2.6988\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5312 - val_loss: 2.6526\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 2.5300 - val_loss: 2.6715\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5453 - val_loss: 2.5579\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5339 - val_loss: 2.5601\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5131 - val_loss: 2.5533\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5034 - val_loss: 2.5353\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4890 - val_loss: 2.5214\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 2.4853 - val_loss: 2.5275\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5029 - val_loss: 2.5116\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5123 - val_loss: 2.4884\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5237 - val_loss: 2.4921\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4754 - val_loss: 2.5356\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4743 - val_loss: 2.5042\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4779 - val_loss: 2.5339\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4731 - val_loss: 2.4983\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4820 - val_loss: 2.5156\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4940 - val_loss: 2.4855\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 2.5139 - val_loss: 2.4789\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4961 - val_loss: 2.5212\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4970 - val_loss: 2.4865\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4710 - val_loss: 2.5050\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4791 - val_loss: 2.4700\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5102 - val_loss: 2.5178\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4733 - val_loss: 2.4652\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4912 - val_loss: 2.4738\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4836 - val_loss: 2.4999\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4682 - val_loss: 2.4691\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5175 - val_loss: 2.4734\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4776 - val_loss: 2.4919\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4974 - val_loss: 2.4875\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4826 - val_loss: 2.5047\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5063 - val_loss: 2.4757\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4952 - val_loss: 2.4838\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4763 - val_loss: 2.4780\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4736 - val_loss: 2.4736\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4781 - val_loss: 2.4567\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4721 - val_loss: 2.4813\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4779 - val_loss: 2.4549\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4817 - val_loss: 2.5014\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4752 - val_loss: 2.4597\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4786 - val_loss: 2.4905\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4909 - val_loss: 2.5405\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4831 - val_loss: 2.4737\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4807 - val_loss: 2.4859\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4845 - val_loss: 2.4500\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4843 - val_loss: 2.4633\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4772 - val_loss: 2.4827\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4701 - val_loss: 2.4515\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4669 - val_loss: 2.4809\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4716 - val_loss: 2.4499\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4817 - val_loss: 2.4568\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 2.4680 - val_loss: 2.4946\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4676 - val_loss: 2.4488\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4877 - val_loss: 2.4685\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4849 - val_loss: 2.4637\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5170 - val_loss: 2.4700\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.5043 - val_loss: 2.4545\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4913 - val_loss: 2.4660\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4749 - val_loss: 2.4846\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4903 - val_loss: 2.4610\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4963 - val_loss: 2.4532\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4811 - val_loss: 2.5050\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4731 - val_loss: 2.4594\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4826 - val_loss: 2.5271\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4715 - val_loss: 2.4621\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 2.4800 - val_loss: 2.4610\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fe0f6b3c8d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V3j8lVPDLIJF",
        "outputId": "db097853-1ebc-4ef2-f077-6f7fd427fa24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "linear_model.evaluate(\n",
        "    test_features, test_labels, verbose=1)"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3/3 [==============================] - 0s 2ms/step - loss: 2.4892\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.489243984222412"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    }
  ]
}